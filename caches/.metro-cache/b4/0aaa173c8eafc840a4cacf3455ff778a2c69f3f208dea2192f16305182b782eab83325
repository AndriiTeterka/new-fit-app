{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":42,"index":57}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"],"imports":1}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":58},"end":{"line":4,"column":44,"index":102}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"],"imports":1}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":103},"end":{"line":5,"column":55,"index":158}}],"key":"mJQeK2ZRLq8v0j9J6l50oLtYU2c=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":159},"end":{"line":6,"column":57,"index":216}}],"key":"/OEwo8APHIJtscmrfuh7WccCayM=","exportNames":["*"],"imports":1}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":217},"end":{"line":7,"column":55,"index":272}}],"key":"ZBgxhB8YmJlp1KxhfM5ocx9xUB0=","exportNames":["*"],"imports":1}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":273},"end":{"line":8,"column":49,"index":322}}],"key":"0Xv+Jf6vWjo3/vKyf7CxgrGRylo=","exportNames":["*"],"imports":1}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":323},"end":{"line":9,"column":61,"index":384}}],"key":"zoUaUuxQP5qPvRrno+lraXgTGfI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      n[k] = e[k];\n    });\n    n.default = e;\n    return n;\n  }\n  exports.getStateFromPath = getStateFromPath;\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _escapeStringRegexp = require(_dependencyMap[1], \"escape-string-regexp\");\n  var escape = _interopDefault(_escapeStringRegexp);\n  var _queryString = require(_dependencyMap[2], \"query-string\");\n  var queryString = _interopNamespace(_queryString);\n  var _arrayStartsWithJs = require(_dependencyMap[3], \"./arrayStartsWith.js\");\n  var _findFocusedRouteJs = require(_dependencyMap[4], \"./findFocusedRoute.js\");\n  var _getPatternPartsJs = require(_dependencyMap[5], \"./getPatternParts.js\");\n  var _isArrayEqualJs = require(_dependencyMap[6], \"./isArrayEqual.js\");\n  var _validatePathConfigJs = require(_dependencyMap[7], \"./validatePathConfig.js\");\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _getConfigResources = getConfigResources(options),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs;\n    var screens = options?.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    var cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    var resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfigJs.validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes) {\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqualJs.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWithJs.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWithJs.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        var aWildCard = a.segments[i] === '*';\n        var bWildCard = b.segments[i] === '*';\n        var aParam = a.segments[i].startsWith(':');\n        var bParam = b.segments[i].startsWith(':');\n        var aRegex = aParam && a.segments[i].includes('(');\n        var bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      var pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        var a = acc[pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          routes = config.routeNames.map(routeName => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === routeName && (0, _arrayStartsWithJs.arrayStartsWith)(config.segments, c.segments);\n            });\n            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(_ref => {\n              var _ref2 = (0, _slicedToArray.default)(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n              var index = Number(key.replace('param_', ''));\n              var param = routeConfig.params.find(it => it.index === index);\n              if (param?.screen === routeName && param?.name) {\n                return [param.name, value];\n              }\n              return null;\n            }).filter(it => it != null).map(_ref3 => {\n              var _ref4 = (0, _slicedToArray.default)(_ref3, 2),\n                key = _ref4[0],\n                value = _ref4[1];\n              if (value == null) {\n                return [key, undefined];\n              }\n              var decoded = decodeURIComponent(value);\n              var parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n              return [key, parsed];\n            })) : undefined;\n            if (params && Object.keys(params).length) {\n              return {\n                name: routeName,\n                params\n              };\n            }\n            return {\n              name: routeName\n            };\n          });\n          remainingPath = remainingPath.replace(match[0], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        var aliasConfigs = [];\n        if (config.alias) {\n          for (var alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = (screen, routeNames, paths, parse) => {\n    var parts = [];\n\n    // Parse the path string into parts for easier matching\n    var _loop2 = function (_screen) {\n      parts.push(...(0, _getPatternPartsJs.getPatternParts)(path).map(part => ({\n        ...part,\n        screen: _screen\n      })));\n    };\n    for (var _ref5 of paths) {\n      var _screen = _ref5.screen;\n      var path = _ref5.path;\n      _loop2(_screen);\n    }\n    var regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        var reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, escape.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    var segments = parts.map(it => it.segment);\n    var params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRouteJs.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":550,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,1,13],[12,11,1,13,"_interopNamespace"],[12,29,1,13,"e"],[12,30,1,13],[13,4,1,13],[13,8,1,13,"e"],[13,9,1,13],[13,13,1,13,"e"],[13,14,1,13],[13,15,1,13,"__esModule"],[13,25,1,13],[13,34,1,13,"e"],[13,35,1,13],[14,4,1,13],[14,8,1,13,"n"],[14,9,1,13],[15,4,1,13],[15,8,1,13,"e"],[15,9,1,13],[15,11,1,13,"Object"],[15,17,1,13],[15,18,1,13,"keys"],[15,22,1,13],[15,23,1,13,"e"],[15,24,1,13],[15,26,1,13,"forEach"],[15,33,1,13],[15,44,1,13,"k"],[15,45,1,13],[16,6,1,13,"n"],[16,7,1,13],[16,8,1,13,"k"],[16,9,1,13],[16,13,1,13,"e"],[16,14,1,13],[16,15,1,13,"k"],[16,16,1,13],[17,4,1,13],[18,4,1,13,"n"],[18,5,1,13],[18,6,1,13,"default"],[18,13,1,13],[18,16,1,13,"e"],[18,17,1,13],[19,4,1,13],[19,11,1,13,"n"],[19,12,1,13],[20,2,1,13],[21,2,31,0,"exports"],[21,9,31,0],[21,10,31,0,"getStateFromPath"],[21,26,31,0],[21,29,31,0,"getStateFromPath"],[21,45,31,0],[22,2,100,1],[22,6,100,1,"_babelRuntimeHelpersSlicedToArray"],[22,39,100,1],[22,42,100,1,"require"],[22,49,100,1],[22,50,100,1,"_dependencyMap"],[22,64,100,1],[23,2,100,1],[23,6,100,1,"_slicedToArray"],[23,20,100,1],[23,23,100,1,"_interopDefault"],[23,38,100,1],[23,39,100,1,"_babelRuntimeHelpersSlicedToArray"],[23,72,100,1],[24,2,3,0],[24,6,3,0,"_escapeStringRegexp"],[24,25,3,0],[24,28,3,0,"require"],[24,35,3,0],[24,36,3,0,"_dependencyMap"],[24,50,3,0],[25,2,3,0],[25,6,3,0,"escape"],[25,12,3,0],[25,15,3,0,"_interopDefault"],[25,30,3,0],[25,31,3,0,"_escapeStringRegexp"],[25,50,3,0],[26,2,4,0],[26,6,4,0,"_queryString"],[26,18,4,0],[26,21,4,0,"require"],[26,28,4,0],[26,29,4,0,"_dependencyMap"],[26,43,4,0],[27,2,4,0],[27,6,4,0,"queryString"],[27,17,4,0],[27,20,4,0,"_interopNamespace"],[27,37,4,0],[27,38,4,0,"_queryString"],[27,50,4,0],[28,2,5,0],[28,6,5,0,"_arrayStartsWithJs"],[28,24,5,0],[28,27,5,0,"require"],[28,34,5,0],[28,35,5,0,"_dependencyMap"],[28,49,5,0],[29,2,6,0],[29,6,6,0,"_findFocusedRouteJs"],[29,25,6,0],[29,28,6,0,"require"],[29,35,6,0],[29,36,6,0,"_dependencyMap"],[29,50,6,0],[30,2,7,0],[30,6,7,0,"_getPatternPartsJs"],[30,24,7,0],[30,27,7,0,"require"],[30,34,7,0],[30,35,7,0,"_dependencyMap"],[30,49,7,0],[31,2,8,0],[31,6,8,0,"_isArrayEqualJs"],[31,21,8,0],[31,24,8,0,"require"],[31,31,8,0],[31,32,8,0,"_dependencyMap"],[31,46,8,0],[32,2,9,0],[32,6,9,0,"_validatePathConfigJs"],[32,27,9,0],[32,30,9,0,"require"],[32,37,9,0],[32,38,9,0,"_dependencyMap"],[32,52,9,0],[33,2,10,0],[34,0,11,0],[35,0,12,0],[36,0,13,0],[37,0,14,0],[38,0,15,0],[39,0,16,0],[40,0,17,0],[41,0,18,0],[42,0,19,0],[43,0,20,0],[44,0,21,0],[45,0,22,0],[46,0,23,0],[47,0,24,0],[48,0,25,0],[49,0,26,0],[50,0,27,0],[51,0,28,0],[52,0,29,0],[53,0,30,0],[54,2,31,7],[54,11,31,16,"getStateFromPath"],[54,27,31,32,"getStateFromPath"],[54,28,31,33,"path"],[54,32,31,37],[54,34,31,39,"options"],[54,41,31,46],[54,43,31,48],[55,4,32,2],[55,8,32,2,"_getConfigResources"],[55,27,32,2],[55,30,35,6,"getConfigResources"],[55,48,35,24],[55,49,35,25,"options"],[55,56,35,32],[55,57,35,33],[56,6,33,4,"initialRoutes"],[56,19,33,17],[56,22,33,17,"_getConfigResources"],[56,41,33,17],[56,42,33,4,"initialRoutes"],[56,55,33,17],[57,6,34,4,"configs"],[57,13,34,11],[57,16,34,11,"_getConfigResources"],[57,35,34,11],[57,36,34,4,"configs"],[57,43,34,11],[58,4,36,2],[58,8,36,8,"screens"],[58,15,36,15],[58,18,36,18,"options"],[58,25,36,25],[58,27,36,27,"screens"],[58,34,36,34],[59,4,37,2],[59,8,37,6,"remaining"],[59,17,37,15],[59,20,37,18,"path"],[59,24,37,22],[59,25,37,23,"replace"],[59,32,37,30],[59,33,37,31],[59,39,37,37],[59,41,37,39],[59,44,37,42],[59,45,37,43],[59,46,37,44],[60,4,37,44],[60,5,38,3,"replace"],[60,12,38,10],[60,13,38,11],[60,18,38,16],[60,20,38,18],[60,22,38,20],[60,23,38,21],[60,24,38,22],[61,4,38,22],[61,5,39,3,"replace"],[61,12,39,10],[61,13,39,11],[61,20,39,18],[61,22,39,20],[61,24,39,22],[61,25,39,23],[61,26,39,24],[61,27,39,25],[63,4,41,2],[64,4,42,2,"remaining"],[64,13,42,11],[64,16,42,14,"remaining"],[64,25,42,23],[64,26,42,24,"endsWith"],[64,34,42,32],[64,35,42,33],[64,38,42,36],[64,39,42,37],[64,42,42,40,"remaining"],[64,51,42,49],[64,54,42,52],[64,57,42,55,"remaining"],[64,66,42,64],[64,69,42,67],[65,4,43,2],[65,8,43,8,"prefix"],[65,14,43,14],[65,17,43,17,"options"],[65,24,43,24],[65,26,43,26,"path"],[65,30,43,30],[65,32,43,32,"replace"],[65,39,43,39],[65,40,43,40],[65,45,43,45],[65,47,43,47],[65,49,43,49],[65,50,43,50],[65,51,43,51],[65,52,43,52],[67,4,45,2],[67,8,45,6,"prefix"],[67,14,45,12],[67,16,45,14],[68,6,46,4],[69,6,47,4],[69,10,47,10,"normalizedPrefix"],[69,26,47,26],[69,29,47,29,"prefix"],[69,35,47,35],[69,36,47,36,"endsWith"],[69,44,47,44],[69,45,47,45],[69,48,47,48],[69,49,47,49],[69,52,47,52,"prefix"],[69,58,47,58],[69,61,47,61],[69,64,47,64,"prefix"],[69,70,47,70],[69,73,47,73],[71,6,49,4],[72,6,50,4],[72,10,50,8],[72,11,50,9,"remaining"],[72,20,50,18],[72,21,50,19,"startsWith"],[72,31,50,29],[72,32,50,30,"normalizedPrefix"],[72,48,50,46],[72,49,50,47],[72,51,50,49],[73,8,51,6],[73,15,51,13,"undefined"],[73,24,51,22],[74,6,52,4],[76,6,54,4],[77,6,55,4,"remaining"],[77,15,55,13],[77,18,55,16,"remaining"],[77,27,55,25],[77,28,55,26,"replace"],[77,35,55,33],[77,36,55,34,"normalizedPrefix"],[77,52,55,50],[77,54,55,52],[77,56,55,54],[77,57,55,55],[78,4,56,2],[79,4,57,2],[79,8,57,6,"screens"],[79,15,57,13],[79,20,57,18,"undefined"],[79,29,57,27],[79,31,57,29],[80,6,58,4],[81,6,59,4],[81,10,59,10,"routes"],[81,17,59,16],[81,20,59,19,"remaining"],[81,29,59,28],[81,30,59,29,"split"],[81,35,59,34],[81,36,59,35],[81,39,59,38],[81,40,59,39],[81,41,59,40,"filter"],[81,47,59,46],[81,48,59,47,"Boolean"],[81,55,59,54],[81,56,59,55],[81,57,59,56,"map"],[81,60,59,59],[81,61,59,60,"segment"],[81,68,59,67],[81,72,59,71],[82,8,60,6],[82,12,60,12,"name"],[82,16,60,16],[82,19,60,19,"decodeURIComponent"],[82,37,60,37],[82,38,60,38,"segment"],[82,45,60,45],[82,46,60,46],[83,8,61,6],[83,15,61,13],[84,10,62,8,"name"],[85,8,63,6],[85,9,63,7],[86,6,64,4],[86,7,64,5],[86,8,64,6],[87,6,65,4],[87,10,65,8,"routes"],[87,17,65,14],[87,18,65,15,"length"],[87,24,65,21],[87,26,65,23],[88,8,66,6],[88,15,66,13,"createNestedStateObject"],[88,38,66,36],[88,39,66,37,"path"],[88,43,66,41],[88,45,66,43,"routes"],[88,52,66,49],[88,54,66,51,"initialRoutes"],[88,67,66,64],[88,68,66,65],[89,6,67,4],[90,6,68,4],[90,13,68,11,"undefined"],[90,22,68,20],[91,4,69,2],[92,4,70,2],[92,8,70,6,"remaining"],[92,17,70,15],[92,22,70,20],[92,25,70,23],[92,27,70,25],[93,6,71,4],[94,6,72,4],[95,6,73,4],[95,10,73,10,"match"],[95,15,73,15],[95,18,73,18,"configs"],[95,25,73,25],[95,26,73,26,"find"],[95,30,73,30],[95,31,73,31,"config"],[95,37,73,37],[95,41,73,41,"config"],[95,47,73,47],[95,48,73,48,"segments"],[95,56,73,56],[95,57,73,57,"join"],[95,61,73,61],[95,62,73,62],[95,65,73,65],[95,66,73,66],[95,71,73,71],[95,73,73,73],[95,74,73,74],[96,6,74,4],[96,10,74,8,"match"],[96,15,74,13],[96,17,74,15],[97,8,75,6],[97,15,75,13,"createNestedStateObject"],[97,38,75,36],[97,39,75,37,"path"],[97,43,75,41],[97,45,75,43,"match"],[97,50,75,48],[97,51,75,49,"routeNames"],[97,61,75,59],[97,62,75,60,"map"],[97,65,75,63],[97,66,75,64,"name"],[97,70,75,68],[97,75,75,73],[98,10,76,8,"name"],[99,8,77,6],[99,9,77,7],[99,10,77,8],[99,11,77,9],[99,13,77,11,"initialRoutes"],[99,26,77,24],[99,28,77,26,"configs"],[99,35,77,33],[99,36,77,34],[100,6,78,4],[101,6,79,4],[101,13,79,11,"undefined"],[101,22,79,20],[102,4,80,2],[103,4,81,2],[103,8,81,6,"result"],[103,14,81,12],[104,4,82,2],[104,8,82,6,"current"],[104,15,82,13],[106,4,84,2],[107,4,85,2],[108,4,86,2],[108,8,86,2,"_matchAgainstConfigs"],[108,28,86,2],[108,31,89,6,"matchAgainstConfigs"],[108,50,89,25],[108,51,89,26,"remaining"],[108,60,89,35],[108,62,89,37,"configs"],[108,69,89,44],[108,70,89,45],[109,6,87,4,"routes"],[109,12,87,10],[109,15,87,10,"_matchAgainstConfigs"],[109,35,87,10],[109,36,87,4,"routes"],[109,42,87,10],[110,6,88,4,"remainingPath"],[110,19,88,17],[110,22,88,17,"_matchAgainstConfigs"],[110,42,88,17],[110,43,88,4,"remainingPath"],[110,56,88,17],[111,4,90,2],[111,8,90,6,"routes"],[111,14,90,12],[111,19,90,17,"undefined"],[111,28,90,26],[111,30,90,28],[112,6,91,4],[113,6,92,4,"current"],[113,13,92,11],[113,16,92,14,"createNestedStateObject"],[113,39,92,37],[113,40,92,38,"path"],[113,44,92,42],[113,46,92,44,"routes"],[113,52,92,50],[113,54,92,52,"initialRoutes"],[113,67,92,65],[113,69,92,67,"configs"],[113,76,92,74],[113,77,92,75],[114,6,93,4,"remaining"],[114,15,93,13],[114,18,93,16,"remainingPath"],[114,31,93,29],[115,6,94,4,"result"],[115,12,94,10],[115,15,94,13,"current"],[115,22,94,20],[116,4,95,2],[117,4,96,2],[117,8,96,6,"current"],[117,15,96,13],[117,19,96,17],[117,23,96,21],[117,27,96,25,"result"],[117,33,96,31],[117,37,96,35],[117,41,96,39],[117,43,96,41],[118,6,97,4],[118,13,97,11,"undefined"],[118,22,97,20],[119,4,98,2],[120,4,99,2],[120,11,99,9,"result"],[120,17,99,15],[121,2,100,0],[123,2,102,0],[124,0,103,0],[125,0,104,0],[126,2,105,0],[126,6,105,6,"cachedConfigResources"],[126,27,105,27],[126,30,105,30],[126,34,105,34,"WeakMap"],[126,41,105,41],[126,42,105,42],[126,43,105,43],[127,2,106,0],[127,11,106,9,"getConfigResources"],[127,29,106,27,"getConfigResources"],[127,30,106,28,"options"],[127,37,106,35],[127,39,106,37],[128,4,107,2],[128,8,107,6],[128,9,107,7,"options"],[128,16,107,14],[128,18,107,16],[128,25,107,23,"prepareConfigResources"],[128,47,107,45],[128,48,107,46],[128,49,107,47],[129,4,108,2],[129,8,108,8,"cached"],[129,14,108,14],[129,17,108,17,"cachedConfigResources"],[129,38,108,38],[129,39,108,39,"get"],[129,42,108,42],[129,43,108,43,"options"],[129,50,108,50],[129,51,108,51],[130,4,109,2],[130,8,109,6,"cached"],[130,14,109,12],[130,16,109,14],[130,23,109,21,"cached"],[130,29,109,27],[131,4,110,2],[131,8,110,8,"resources"],[131,17,110,17],[131,20,110,20,"prepareConfigResources"],[131,42,110,42],[131,43,110,43,"options"],[131,50,110,50],[131,51,110,51],[132,4,111,2,"cachedConfigResources"],[132,25,111,23],[132,26,111,24,"set"],[132,29,111,27],[132,30,111,28,"options"],[132,37,111,35],[132,39,111,37,"resources"],[132,48,111,46],[132,49,111,47],[133,4,112,2],[133,11,112,9,"resources"],[133,20,112,18],[134,2,113,0],[135,2,114,0],[135,11,114,9,"prepareConfigResources"],[135,33,114,31,"prepareConfigResources"],[135,34,114,32,"options"],[135,41,114,39],[135,43,114,41],[136,4,115,2],[136,8,115,6,"options"],[136,15,115,13],[136,17,115,15],[137,6,116,4],[137,10,116,4,"validatePathConfig"],[137,31,116,22],[137,32,116,22,"validatePathConfig"],[137,50,116,22],[137,52,116,23,"options"],[137,59,116,30],[137,60,116,31],[138,4,117,2],[139,4,118,2],[139,8,118,8,"initialRoutes"],[139,21,118,21],[139,24,118,24,"getInitialRoutes"],[139,40,118,40],[139,41,118,41,"options"],[139,48,118,48],[139,49,118,49],[140,4,119,2],[140,8,119,8,"configs"],[140,15,119,15],[140,18,119,18,"getSortedNormalizedConfigs"],[140,44,119,44],[140,45,119,45,"initialRoutes"],[140,58,119,58],[140,60,119,60,"options"],[140,67,119,67],[140,69,119,69,"screens"],[140,76,119,76],[140,77,119,77],[141,4,120,2,"checkForDuplicatedConfigs"],[141,29,120,27],[141,30,120,28,"configs"],[141,37,120,35],[141,38,120,36],[142,4,121,2],[142,8,121,8,"configWithRegexes"],[142,25,121,25],[142,28,121,28,"getConfigsWithRegexes"],[142,49,121,49],[142,50,121,50,"configs"],[142,57,121,57],[142,58,121,58],[143,4,122,2],[143,11,122,9],[144,6,123,4,"initialRoutes"],[144,19,123,17],[145,6,124,4,"configs"],[145,13,124,11],[146,6,125,4,"configWithRegexes"],[147,4,126,2],[147,5,126,3],[148,2,127,0],[149,2,128,0],[149,11,128,9,"getInitialRoutes"],[149,27,128,25,"getInitialRoutes"],[149,28,128,26,"options"],[149,35,128,33],[149,37,128,35],[150,4,129,2],[150,8,129,8,"initialRoutes"],[150,21,129,21],[150,24,129,24],[150,26,129,26],[151,4,130,2],[151,8,130,6,"options"],[151,15,130,13],[151,17,130,15,"initialRouteName"],[151,33,130,31],[151,35,130,33],[152,6,131,4,"initialRoutes"],[152,19,131,17],[152,20,131,18,"push"],[152,24,131,22],[152,25,131,23],[153,8,132,6,"initialRouteName"],[153,24,132,22],[153,26,132,24,"options"],[153,33,132,31],[153,34,132,32,"initialRouteName"],[153,50,132,48],[154,8,133,6,"parentScreens"],[154,21,133,19],[154,23,133,21],[155,6,134,4],[155,7,134,5],[155,8,134,6],[156,4,135,2],[157,4,136,2],[157,11,136,9,"initialRoutes"],[157,24,136,22],[158,2,137,0],[159,2,138,0],[159,11,138,9,"getSortedNormalizedConfigs"],[159,37,138,35,"getSortedNormalizedConfigs"],[159,38,138,36,"initialRoutes"],[159,51,138,49],[159,53,138,65],[160,4,138,65],[160,8,138,51,"screens"],[160,15,138,58],[160,18,138,58,"arguments"],[160,27,138,58],[160,28,138,58,"length"],[160,34,138,58],[160,42,138,58,"arguments"],[160,51,138,58],[160,59,138,58,"undefined"],[160,68,138,58],[160,71,138,58,"arguments"],[160,80,138,58],[160,86,138,61],[160,87,138,62],[160,88,138,63],[161,4,139,2],[162,4,140,2],[162,11,140,9],[162,13,140,11],[162,14,140,12,"concat"],[162,20,140,18],[162,21,140,19],[162,24,140,22,"Object"],[162,30,140,28],[162,31,140,29,"keys"],[162,35,140,33],[162,36,140,34,"screens"],[162,43,140,41],[162,44,140,42],[162,45,140,43,"map"],[162,48,140,46],[162,49,140,47,"key"],[162,52,140,50],[162,56,140,54,"createNormalizedConfigs"],[162,79,140,77],[162,80,140,78,"key"],[162,83,140,81],[162,85,140,83,"screens"],[162,92,140,90],[162,94,140,92,"initialRoutes"],[162,107,140,105],[162,109,140,107],[162,111,140,109],[162,113,140,111],[162,115,140,113],[162,117,140,115],[162,119,140,117],[162,120,140,118],[162,121,140,119],[162,122,140,120],[162,123,140,121,"sort"],[162,127,140,125],[162,128,140,126],[162,129,140,127,"a"],[162,130,140,128],[162,132,140,130,"b"],[162,133,140,131],[162,138,140,136],[163,6,141,4],[164,6,142,4],[165,6,143,4],[166,6,144,4],[167,6,145,4],[168,6,146,4],[170,6,148,4],[171,6,149,4],[172,6,150,4],[172,10,150,8],[172,14,150,8,"isArrayEqual"],[172,29,150,20],[172,30,150,20,"isArrayEqual"],[172,42,150,20],[172,44,150,21,"a"],[172,45,150,22],[172,46,150,23,"segments"],[172,54,150,31],[172,56,150,33,"b"],[172,57,150,34],[172,58,150,35,"segments"],[172,66,150,43],[172,67,150,44],[172,69,150,46],[173,8,151,6],[173,15,151,13,"b"],[173,16,151,14],[173,17,151,15,"routeNames"],[173,27,151,25],[173,28,151,26,"join"],[173,32,151,30],[173,33,151,31],[173,36,151,34],[173,37,151,35],[173,38,151,36,"localeCompare"],[173,51,151,49],[173,52,151,50,"a"],[173,53,151,51],[173,54,151,52,"routeNames"],[173,64,151,62],[173,65,151,63,"join"],[173,69,151,67],[173,70,151,68],[173,73,151,71],[173,74,151,72],[173,75,151,73],[174,6,152,4],[176,6,154,4],[177,6,155,4],[178,6,156,4],[178,10,156,8],[178,14,156,8,"arrayStartsWith"],[178,32,156,23],[178,33,156,23,"arrayStartsWith"],[178,48,156,23],[178,50,156,24,"a"],[178,51,156,25],[178,52,156,26,"segments"],[178,60,156,34],[178,62,156,36,"b"],[178,63,156,37],[178,64,156,38,"segments"],[178,72,156,46],[178,73,156,47],[178,75,156,49],[179,8,157,6],[179,15,157,13],[179,16,157,14],[179,17,157,15],[180,6,158,4],[181,6,159,4],[181,10,159,8],[181,14,159,8,"arrayStartsWith"],[181,32,159,23],[181,33,159,23,"arrayStartsWith"],[181,48,159,23],[181,50,159,24,"b"],[181,51,159,25],[181,52,159,26,"segments"],[181,60,159,34],[181,62,159,36,"a"],[181,63,159,37],[181,64,159,38,"segments"],[181,72,159,46],[181,73,159,47],[181,75,159,49],[182,8,160,6],[182,15,160,13],[182,16,160,14],[183,6,161,4],[184,6,162,4],[184,11,162,9],[184,15,162,13,"i"],[184,16,162,14],[184,19,162,17],[184,20,162,18],[184,22,162,20,"i"],[184,23,162,21],[184,26,162,24,"Math"],[184,30,162,28],[184,31,162,29,"max"],[184,34,162,32],[184,35,162,33,"a"],[184,36,162,34],[184,37,162,35,"segments"],[184,45,162,43],[184,46,162,44,"length"],[184,52,162,50],[184,54,162,52,"b"],[184,55,162,53],[184,56,162,54,"segments"],[184,64,162,62],[184,65,162,63,"length"],[184,71,162,69],[184,72,162,70],[184,74,162,72,"i"],[184,75,162,73],[184,77,162,75],[184,79,162,77],[185,8,163,6],[186,8,164,6],[186,12,164,10,"a"],[186,13,164,11],[186,14,164,12,"segments"],[186,22,164,20],[186,23,164,21,"i"],[186,24,164,22],[186,25,164,23],[186,29,164,27],[186,33,164,31],[186,35,164,33],[187,10,165,8],[187,17,165,15],[187,18,165,16],[188,8,166,6],[190,8,168,6],[191,8,169,6],[191,12,169,10,"b"],[191,13,169,11],[191,14,169,12,"segments"],[191,22,169,20],[191,23,169,21,"i"],[191,24,169,22],[191,25,169,23],[191,29,169,27],[191,33,169,31],[191,35,169,33],[192,10,170,8],[192,17,170,15],[192,18,170,16],[192,19,170,17],[193,8,171,6],[194,8,172,6],[194,12,172,12,"aWildCard"],[194,21,172,21],[194,24,172,24,"a"],[194,25,172,25],[194,26,172,26,"segments"],[194,34,172,34],[194,35,172,35,"i"],[194,36,172,36],[194,37,172,37],[194,42,172,42],[194,45,172,45],[195,8,173,6],[195,12,173,12,"bWildCard"],[195,21,173,21],[195,24,173,24,"b"],[195,25,173,25],[195,26,173,26,"segments"],[195,34,173,34],[195,35,173,35,"i"],[195,36,173,36],[195,37,173,37],[195,42,173,42],[195,45,173,45],[196,8,174,6],[196,12,174,12,"aParam"],[196,18,174,18],[196,21,174,21,"a"],[196,22,174,22],[196,23,174,23,"segments"],[196,31,174,31],[196,32,174,32,"i"],[196,33,174,33],[196,34,174,34],[196,35,174,35,"startsWith"],[196,45,174,45],[196,46,174,46],[196,49,174,49],[196,50,174,50],[197,8,175,6],[197,12,175,12,"bParam"],[197,18,175,18],[197,21,175,21,"b"],[197,22,175,22],[197,23,175,23,"segments"],[197,31,175,31],[197,32,175,32,"i"],[197,33,175,33],[197,34,175,34],[197,35,175,35,"startsWith"],[197,45,175,45],[197,46,175,46],[197,49,175,49],[197,50,175,50],[198,8,176,6],[198,12,176,12,"aRegex"],[198,18,176,18],[198,21,176,21,"aParam"],[198,27,176,27],[198,31,176,31,"a"],[198,32,176,32],[198,33,176,33,"segments"],[198,41,176,41],[198,42,176,42,"i"],[198,43,176,43],[198,44,176,44],[198,45,176,45,"includes"],[198,53,176,53],[198,54,176,54],[198,57,176,57],[198,58,176,58],[199,8,177,6],[199,12,177,12,"bRegex"],[199,18,177,18],[199,21,177,21,"bParam"],[199,27,177,27],[199,31,177,31,"b"],[199,32,177,32],[199,33,177,33,"segments"],[199,41,177,41],[199,42,177,42,"i"],[199,43,177,43],[199,44,177,44],[199,45,177,45,"includes"],[199,53,177,53],[199,54,177,54],[199,57,177,57],[199,58,177,58],[201,8,179,6],[202,8,180,6],[202,12,180,10,"aWildCard"],[202,21,180,19],[202,25,180,23,"bWildCard"],[202,34,180,32],[202,38,180,36,"aRegex"],[202,44,180,42],[202,48,180,46,"bRegex"],[202,54,180,52],[202,56,180,54],[203,10,181,8],[204,8,182,6],[206,8,184,6],[207,8,185,6],[207,12,185,10,"aWildCard"],[207,21,185,19],[207,25,185,23],[207,26,185,24,"bWildCard"],[207,35,185,33],[207,37,185,35],[208,10,186,8],[208,17,186,15],[208,18,186,16],[209,8,187,6],[211,8,189,6],[212,8,190,6],[212,12,190,10,"bWildCard"],[212,21,190,19],[212,25,190,23],[212,26,190,24,"aWildCard"],[212,35,190,33],[212,37,190,35],[213,10,191,8],[213,17,191,15],[213,18,191,16],[213,19,191,17],[214,8,192,6],[216,8,194,6],[217,8,195,6],[217,12,195,10,"aParam"],[217,18,195,16],[217,22,195,20],[217,23,195,21,"bParam"],[217,29,195,27],[217,31,195,29],[218,10,196,8],[218,17,196,15],[218,18,196,16],[219,8,197,6],[221,8,199,6],[222,8,200,6],[222,12,200,10,"bParam"],[222,18,200,16],[222,22,200,20],[222,23,200,21,"aParam"],[222,29,200,27],[222,31,200,29],[223,10,201,8],[223,17,201,15],[223,18,201,16],[223,19,201,17],[224,8,202,6],[226,8,204,6],[227,8,205,6],[227,12,205,10,"aRegex"],[227,18,205,16],[227,22,205,20],[227,23,205,21,"bRegex"],[227,29,205,27],[227,31,205,29],[228,10,206,8],[228,17,206,15],[228,18,206,16],[228,19,206,17],[229,8,207,6],[231,8,209,6],[232,8,210,6],[232,12,210,10,"bRegex"],[232,18,210,16],[232,22,210,20],[232,23,210,21,"aRegex"],[232,29,210,27],[232,31,210,29],[233,10,211,8],[233,17,211,15],[233,18,211,16],[234,8,212,6],[235,6,213,4],[236,6,214,4],[236,13,214,11,"a"],[236,14,214,12],[236,15,214,13,"segments"],[236,23,214,21],[236,24,214,22,"length"],[236,30,214,28],[236,33,214,31,"b"],[236,34,214,32],[236,35,214,33,"segments"],[236,43,214,41],[236,44,214,42,"length"],[236,50,214,48],[237,4,215,2],[237,5,215,3],[237,6,215,4],[238,2,216,0],[239,2,217,0],[239,11,217,9,"checkForDuplicatedConfigs"],[239,36,217,34,"checkForDuplicatedConfigs"],[239,37,217,35,"configs"],[239,44,217,42],[239,46,217,44],[240,4,218,2],[241,4,219,2,"configs"],[241,11,219,9],[241,12,219,10,"reduce"],[241,18,219,16],[241,19,219,17],[241,20,219,18,"acc"],[241,23,219,21],[241,25,219,23,"config"],[241,31,219,29],[241,36,219,34],[242,6,220,4],[242,10,220,10,"pattern"],[242,17,220,17],[242,20,220,20,"config"],[242,26,220,26],[242,27,220,27,"segments"],[242,35,220,35],[242,36,220,36,"join"],[242,40,220,40],[242,41,220,41],[242,44,220,44],[242,45,220,45],[243,6,221,4],[243,10,221,8,"acc"],[243,13,221,11],[243,14,221,12,"pattern"],[243,21,221,19],[243,22,221,20],[243,24,221,22],[244,8,222,6],[244,12,222,12,"a"],[244,13,222,13],[244,16,222,16,"acc"],[244,19,222,19],[244,20,222,20,"pattern"],[244,27,222,27],[244,28,222,28],[244,29,222,29,"routeNames"],[244,39,222,39],[245,8,223,6],[245,12,223,12,"b"],[245,13,223,13],[245,16,223,16,"config"],[245,22,223,22],[245,23,223,23,"routeNames"],[245,33,223,33],[247,8,225,6],[248,8,226,6],[249,8,227,6],[249,12,227,12,"intersects"],[249,22,227,22],[249,25,227,25,"a"],[249,26,227,26],[249,27,227,27,"length"],[249,33,227,33],[249,36,227,36,"b"],[249,37,227,37],[249,38,227,38,"length"],[249,44,227,44],[249,47,227,47,"b"],[249,48,227,48],[249,49,227,49,"every"],[249,54,227,54],[249,55,227,55],[249,56,227,56,"it"],[249,58,227,58],[249,60,227,60,"i"],[249,61,227,61],[249,66,227,66,"a"],[249,67,227,67],[249,68,227,68,"i"],[249,69,227,69],[249,70,227,70],[249,75,227,75,"it"],[249,77,227,77],[249,78,227,78],[249,81,227,81,"a"],[249,82,227,82],[249,83,227,83,"every"],[249,88,227,88],[249,89,227,89],[249,90,227,90,"it"],[249,92,227,92],[249,94,227,94,"i"],[249,95,227,95],[249,100,227,100,"b"],[249,101,227,101],[249,102,227,102,"i"],[249,103,227,103],[249,104,227,104],[249,109,227,109,"it"],[249,111,227,111],[249,112,227,112],[250,8,228,6],[250,12,228,10],[250,13,228,11,"intersects"],[250,23,228,21],[250,25,228,23],[251,10,229,8],[251,16,229,14],[251,20,229,18,"Error"],[251,25,229,23],[251,26,229,24],[251,91,229,89,"pattern"],[251,98,229,96],[251,121,229,119,"a"],[251,122,229,120],[251,123,229,121,"join"],[251,127,229,125],[251,128,229,126],[251,133,229,131],[251,134,229,132],[251,144,229,142,"b"],[251,145,229,143],[251,146,229,144,"join"],[251,150,229,148],[251,151,229,149],[251,156,229,154],[251,157,229,155],[251,229,229,227],[251,230,229,228],[252,8,230,6],[253,6,231,4],[254,6,232,4],[254,13,232,11,"Object"],[254,19,232,17],[254,20,232,18,"assign"],[254,26,232,24],[254,27,232,25,"acc"],[254,30,232,28],[254,32,232,30],[255,8,233,6],[255,9,233,7,"pattern"],[255,16,233,14],[255,19,233,17,"config"],[256,6,234,4],[256,7,234,5],[256,8,234,6],[257,4,235,2],[257,5,235,3],[257,7,235,5],[257,8,235,6],[257,9,235,7],[257,10,235,8],[258,2,236,0],[259,2,237,0],[259,11,237,9,"getConfigsWithRegexes"],[259,32,237,30,"getConfigsWithRegexes"],[259,33,237,31,"configs"],[259,40,237,38],[259,42,237,40],[260,4,238,2],[260,11,238,9,"configs"],[260,18,238,16],[260,19,238,17,"map"],[260,22,238,20],[260,23,238,21,"c"],[260,24,238,22],[260,29,238,27],[261,6,239,4],[261,9,239,7,"c"],[261,10,239,8],[262,6,240,4],[263,6,241,4,"regex"],[263,11,241,9],[263,13,241,11,"c"],[263,14,241,12],[263,15,241,13,"regex"],[263,20,241,18],[263,23,241,21],[263,27,241,25,"RegExp"],[263,33,241,31],[263,34,241,32,"c"],[263,35,241,33],[263,36,241,34,"regex"],[263,41,241,39],[263,42,241,40,"source"],[263,48,241,46],[263,51,241,49],[263,54,241,52],[263,55,241,53],[263,58,241,56,"undefined"],[264,4,242,2],[264,5,242,3],[264,6,242,4],[264,7,242,5],[265,2,243,0],[266,2,244,0],[266,6,244,6,"matchAgainstConfigs"],[266,25,244,25],[266,28,244,28,"matchAgainstConfigs"],[266,29,244,29,"remaining"],[266,38,244,38],[266,40,244,40,"configs"],[266,47,244,47],[266,52,244,52],[267,4,245,2],[267,8,245,6,"routes"],[267,14,245,12],[268,4,246,2],[268,8,246,6,"remainingPath"],[268,21,246,19],[268,24,246,22,"remaining"],[268,33,246,31],[270,4,248,2],[271,4,248,2],[271,8,248,2,"_loop"],[271,13,248,2],[271,25,248,2,"_loop"],[271,26,248,2,"config"],[271,32,248,2],[271,34,249,32],[272,8,250,4],[272,12,250,8],[272,13,250,9,"config"],[272,19,250,15],[272,20,250,16,"regex"],[272,25,250,21],[272,27,250,23],[273,10,250,23],[274,8,252,4],[275,8,253,4],[275,12,253,10,"match"],[275,17,253,15],[275,20,253,18,"remainingPath"],[275,33,253,31],[275,34,253,32,"match"],[275,39,253,37],[275,40,253,38,"config"],[275,46,253,44],[275,47,253,45,"regex"],[275,52,253,50],[275,53,253,51],[277,8,255,4],[278,8,256,4],[278,12,256,8,"match"],[278,17,256,13],[278,19,256,15],[279,10,257,6,"routes"],[279,16,257,12],[279,19,257,15,"config"],[279,25,257,21],[279,26,257,22,"routeNames"],[279,36,257,32],[279,37,257,33,"map"],[279,40,257,36],[279,41,257,37,"routeName"],[279,50,257,46],[279,54,257,50],[280,12,258,8],[280,16,258,14,"routeConfig"],[280,27,258,25],[280,30,258,28,"configs"],[280,37,258,35],[280,38,258,36,"find"],[280,42,258,40],[280,43,258,41,"c"],[280,44,258,42],[280,48,258,46],[281,14,259,10],[282,14,260,10],[282,21,260,17,"c"],[282,22,260,18],[282,23,260,19,"screen"],[282,29,260,25],[282,34,260,30,"routeName"],[282,43,260,39],[282,47,260,43],[282,51,260,43,"arrayStartsWith"],[282,69,260,58],[282,70,260,58,"arrayStartsWith"],[282,85,260,58],[282,87,260,59,"config"],[282,93,260,65],[282,94,260,66,"segments"],[282,102,260,74],[282,104,260,76,"c"],[282,105,260,77],[282,106,260,78,"segments"],[282,114,260,86],[282,115,260,87],[283,12,261,8],[283,13,261,9],[283,14,261,10],[284,12,262,8],[284,16,262,14,"params"],[284,22,262,20],[284,25,262,23,"routeConfig"],[284,36,262,34],[284,40,262,38,"match"],[284,45,262,43],[284,46,262,44,"groups"],[284,52,262,50],[284,55,262,53,"Object"],[284,61,262,59],[284,62,262,60,"fromEntries"],[284,73,262,71],[284,74,262,72,"Object"],[284,80,262,78],[284,81,262,79,"entries"],[284,88,262,86],[284,89,262,87,"match"],[284,94,262,92],[284,95,262,93,"groups"],[284,101,262,99],[284,102,262,100],[284,103,262,101,"map"],[284,106,262,104],[284,107,262,105,"_ref"],[284,111,262,105],[284,115,262,123],[285,14,262,123],[285,18,262,123,"_ref2"],[285,23,262,123],[285,30,262,123,"_slicedToArray"],[285,44,262,123],[285,45,262,123,"default"],[285,52,262,123],[285,54,262,123,"_ref"],[285,58,262,123],[286,16,262,107,"key"],[286,19,262,110],[286,22,262,110,"_ref2"],[286,27,262,110],[287,16,262,112,"value"],[287,21,262,117],[287,24,262,117,"_ref2"],[287,29,262,117],[288,14,263,10],[288,18,263,16,"index"],[288,23,263,21],[288,26,263,24,"Number"],[288,32,263,30],[288,33,263,31,"key"],[288,36,263,34],[288,37,263,35,"replace"],[288,44,263,42],[288,45,263,43],[288,53,263,51],[288,55,263,53],[288,57,263,55],[288,58,263,56],[288,59,263,57],[289,14,264,10],[289,18,264,16,"param"],[289,23,264,21],[289,26,264,24,"routeConfig"],[289,37,264,35],[289,38,264,36,"params"],[289,44,264,42],[289,45,264,43,"find"],[289,49,264,47],[289,50,264,48,"it"],[289,52,264,50],[289,56,264,54,"it"],[289,58,264,56],[289,59,264,57,"index"],[289,64,264,62],[289,69,264,67,"index"],[289,74,264,72],[289,75,264,73],[290,14,265,10],[290,18,265,14,"param"],[290,23,265,19],[290,25,265,21,"screen"],[290,31,265,27],[290,36,265,32,"routeName"],[290,45,265,41],[290,49,265,45,"param"],[290,54,265,50],[290,56,265,52,"name"],[290,60,265,56],[290,62,265,58],[291,16,266,12],[291,23,266,19],[291,24,266,20,"param"],[291,29,266,25],[291,30,266,26,"name"],[291,34,266,30],[291,36,266,32,"value"],[291,41,266,37],[291,42,266,38],[292,14,267,10],[293,14,268,10],[293,21,268,17],[293,25,268,21],[294,12,269,8],[294,13,269,9],[294,14,269,10],[294,15,269,11,"filter"],[294,21,269,17],[294,22,269,18,"it"],[294,24,269,20],[294,28,269,24,"it"],[294,30,269,26],[294,34,269,30],[294,38,269,34],[294,39,269,35],[294,40,269,36,"map"],[294,43,269,39],[294,44,269,40,"_ref3"],[294,49,269,40],[294,53,269,58],[295,14,269,58],[295,18,269,58,"_ref4"],[295,23,269,58],[295,30,269,58,"_slicedToArray"],[295,44,269,58],[295,45,269,58,"default"],[295,52,269,58],[295,54,269,58,"_ref3"],[295,59,269,58],[296,16,269,42,"key"],[296,19,269,45],[296,22,269,45,"_ref4"],[296,27,269,45],[297,16,269,47,"value"],[297,21,269,52],[297,24,269,52,"_ref4"],[297,29,269,52],[298,14,270,10],[298,18,270,14,"value"],[298,23,270,19],[298,27,270,23],[298,31,270,27],[298,33,270,29],[299,16,271,12],[299,23,271,19],[299,24,271,20,"key"],[299,27,271,23],[299,29,271,25,"undefined"],[299,38,271,34],[299,39,271,35],[300,14,272,10],[301,14,273,10],[301,18,273,16,"decoded"],[301,25,273,23],[301,28,273,26,"decodeURIComponent"],[301,46,273,44],[301,47,273,45,"value"],[301,52,273,50],[301,53,273,51],[302,14,274,10],[302,18,274,16,"parsed"],[302,24,274,22],[302,27,274,25,"routeConfig"],[302,38,274,36],[302,39,274,37,"parse"],[302,44,274,42],[302,47,274,45,"key"],[302,50,274,48],[302,51,274,49],[302,54,274,52,"routeConfig"],[302,65,274,63],[302,66,274,64,"parse"],[302,71,274,69],[302,72,274,70,"key"],[302,75,274,73],[302,76,274,74],[302,77,274,75,"decoded"],[302,84,274,82],[302,85,274,83],[302,88,274,86,"decoded"],[302,95,274,93],[303,14,275,10],[303,21,275,17],[303,22,275,18,"key"],[303,25,275,21],[303,27,275,23,"parsed"],[303,33,275,29],[303,34,275,30],[304,12,276,8],[304,13,276,9],[304,14,276,10],[304,15,276,11],[304,18,276,14,"undefined"],[304,27,276,23],[305,12,277,8],[305,16,277,12,"params"],[305,22,277,18],[305,26,277,22,"Object"],[305,32,277,28],[305,33,277,29,"keys"],[305,37,277,33],[305,38,277,34,"params"],[305,44,277,40],[305,45,277,41],[305,46,277,42,"length"],[305,52,277,48],[305,54,277,50],[306,14,278,10],[306,21,278,17],[307,16,279,12,"name"],[307,20,279,16],[307,22,279,18,"routeName"],[307,31,279,27],[308,16,280,12,"params"],[309,14,281,10],[309,15,281,11],[310,12,282,8],[311,12,283,8],[311,19,283,15],[312,14,284,10,"name"],[312,18,284,14],[312,20,284,16,"routeName"],[313,12,285,8],[313,13,285,9],[314,10,286,6],[314,11,286,7],[314,12,286,8],[315,10,287,6,"remainingPath"],[315,23,287,19],[315,26,287,22,"remainingPath"],[315,39,287,35],[315,40,287,36,"replace"],[315,47,287,43],[315,48,287,44,"match"],[315,53,287,49],[315,54,287,50],[315,55,287,51],[315,56,287,52],[315,58,287,54],[315,60,287,56],[315,61,287,57],[316,10,287,58],[317,8,289,4],[318,6,290,2],[318,7,290,3],[319,6,290,3,"_ret"],[319,10,290,3],[320,4,249,2],[320,9,249,7],[320,13,249,13,"config"],[320,19,249,19],[320,23,249,23,"configs"],[320,30,249,30],[321,6,249,30,"_ret"],[321,10,249,30],[321,13,249,30,"_loop"],[321,18,249,30],[321,19,249,30,"config"],[321,25,249,30],[322,6,249,30],[322,10,249,30,"_ret"],[322,14,249,30],[322,22,251,6],[323,6,251,15],[323,10,251,15,"_ret"],[323,14,251,15],[323,22,288,6],[324,4,288,12],[325,4,291,2],[325,11,291,9],[326,6,292,4,"routes"],[326,12,292,10],[327,6,293,4,"remainingPath"],[328,4,294,2],[328,5,294,3],[329,2,295,0],[329,3,295,1],[330,2,296,0],[330,6,296,6,"createNormalizedConfigs"],[330,29,296,29],[330,32,296,32,"createNormalizedConfigs"],[330,33,296,33,"screen"],[330,39,296,39],[330,41,296,41,"routeConfig"],[330,52,296,52],[330,54,296,54,"initials"],[330,62,296,62],[330,64,296,64,"paths"],[330,69,296,69],[330,71,296,71,"parentScreens"],[330,84,296,84],[330,86,296,86,"routeNames"],[330,96,296,96],[330,101,296,101],[331,4,297,2],[331,8,297,8,"configs"],[331,15,297,15],[331,18,297,18],[331,20,297,20],[332,4,298,2,"routeNames"],[332,14,298,12],[332,15,298,13,"push"],[332,19,298,17],[332,20,298,18,"screen"],[332,26,298,24],[332,27,298,25],[333,4,299,2,"parentScreens"],[333,17,299,15],[333,18,299,16,"push"],[333,22,299,20],[333,23,299,21,"screen"],[333,29,299,27],[333,30,299,28],[334,4,300,2],[334,8,300,8,"config"],[334,14,300,14],[334,17,300,17,"routeConfig"],[334,28,300,28],[334,29,300,29,"screen"],[334,35,300,35],[334,36,300,36],[335,4,301,2],[335,8,301,6],[335,15,301,13,"config"],[335,21,301,19],[335,26,301,24],[335,34,301,32],[335,36,301,34],[336,6,302,4,"paths"],[336,11,302,9],[336,12,302,10,"push"],[336,16,302,14],[336,17,302,15],[337,8,303,6,"screen"],[337,14,303,12],[338,8,304,6,"path"],[338,12,304,10],[338,14,304,12,"config"],[339,6,305,4],[339,7,305,5],[339,8,305,6],[340,6,306,4,"configs"],[340,13,306,11],[340,14,306,12,"push"],[340,18,306,16],[340,19,306,17,"createConfigItem"],[340,35,306,33],[340,36,306,34,"screen"],[340,42,306,40],[340,44,306,42],[340,45,306,43],[340,48,306,46,"routeNames"],[340,58,306,56],[340,59,306,57],[340,61,306,59],[340,62,306,60],[340,65,306,63,"paths"],[340,70,306,68],[340,71,306,69],[340,72,306,70],[340,73,306,71],[341,4,307,2],[341,5,307,3],[341,11,307,9],[341,15,307,13],[341,22,307,20,"config"],[341,28,307,26],[341,33,307,31],[341,41,307,39],[341,43,307,41],[342,6,308,4],[343,6,309,4],[344,6,310,4],[345,6,311,4],[345,10,311,8],[345,17,311,15,"config"],[345,23,311,21],[345,24,311,22,"path"],[345,28,311,26],[345,33,311,31],[345,41,311,39],[345,43,311,41],[346,8,312,6],[346,12,312,10,"config"],[346,18,312,16],[346,19,312,17,"exact"],[346,24,312,22],[346,28,312,26,"config"],[346,34,312,32],[346,35,312,33,"path"],[346,39,312,37],[346,43,312,41],[346,47,312,45],[346,49,312,47],[347,10,313,8],[347,16,313,14],[347,20,313,18,"Error"],[347,25,313,23],[347,26,313,24],[347,37,313,35,"screen"],[347,43,313,41],[347,223,313,221],[347,224,313,222],[348,8,314,6],[350,8,316,6],[351,8,317,6],[352,8,318,6],[352,12,318,12,"aliasConfigs"],[352,24,318,24],[352,27,318,27],[352,29,318,29],[353,8,319,6],[353,12,319,10,"config"],[353,18,319,16],[353,19,319,17,"alias"],[353,24,319,22],[353,26,319,24],[354,10,320,8],[354,15,320,13],[354,19,320,19,"alias"],[354,24,320,24],[354,28,320,28,"config"],[354,34,320,34],[354,35,320,35,"alias"],[354,40,320,40],[354,42,320,42],[355,12,321,10],[355,16,321,14],[355,23,321,21,"alias"],[355,28,321,26],[355,33,321,31],[355,41,321,39],[355,43,321,41],[356,14,322,12,"aliasConfigs"],[356,26,322,24],[356,27,322,25,"push"],[356,31,322,29],[356,32,322,30,"createConfigItem"],[356,48,322,46],[356,49,322,47,"screen"],[356,55,322,53],[356,57,322,55],[356,58,322,56],[356,61,322,59,"routeNames"],[356,71,322,69],[356,72,322,70],[356,74,322,72],[356,75,322,73],[356,78,322,76,"paths"],[356,83,322,81],[356,85,322,83],[357,16,323,14,"screen"],[357,22,323,20],[358,16,324,14,"path"],[358,20,324,18],[358,22,324,20,"alias"],[359,14,325,12],[359,15,325,13],[359,16,325,14],[359,18,325,16,"config"],[359,24,325,22],[359,25,325,23,"parse"],[359,30,325,28],[359,31,325,29],[359,32,325,30],[360,12,326,10],[360,13,326,11],[360,19,326,17],[360,23,326,21],[360,30,326,28,"alias"],[360,35,326,33],[360,40,326,38],[360,48,326,46],[360,50,326,48],[361,14,327,12,"aliasConfigs"],[361,26,327,24],[361,27,327,25,"push"],[361,31,327,29],[361,32,327,30,"createConfigItem"],[361,48,327,46],[361,49,327,47,"screen"],[361,55,327,53],[361,57,327,55],[361,58,327,56],[361,61,327,59,"routeNames"],[361,71,327,69],[361,72,327,70],[361,74,327,72,"alias"],[361,79,327,77],[361,80,327,78,"exact"],[361,85,327,83],[361,88,327,86],[361,89,327,87],[362,16,328,14,"screen"],[362,22,328,20],[363,16,329,14,"path"],[363,20,329,18],[363,22,329,20,"alias"],[363,27,329,25],[363,28,329,26,"path"],[364,14,330,12],[364,15,330,13],[364,16,330,14],[364,19,330,17],[364,20,330,18],[364,23,330,21,"paths"],[364,28,330,26],[364,30,330,28],[365,16,331,14,"screen"],[365,22,331,20],[366,16,332,14,"path"],[366,20,332,18],[366,22,332,20,"alias"],[366,27,332,25],[366,28,332,26,"path"],[367,14,333,12],[367,15,333,13],[367,16,333,14],[367,18,333,16,"alias"],[367,23,333,21],[367,24,333,22,"parse"],[367,29,333,27],[367,30,333,28],[367,31,333,29],[368,12,334,10],[369,10,335,8],[370,8,336,6],[371,8,337,6],[371,12,337,10,"config"],[371,18,337,16],[371,19,337,17,"exact"],[371,24,337,22],[371,26,337,24],[372,10,338,8],[373,10,339,8],[374,10,340,8,"paths"],[374,15,340,13],[374,16,340,14,"length"],[374,22,340,20],[374,25,340,23],[374,26,340,24],[375,8,341,6],[376,8,342,6,"paths"],[376,13,342,11],[376,14,342,12,"push"],[376,18,342,16],[376,19,342,17],[377,10,343,8,"screen"],[377,16,343,14],[378,10,344,8,"path"],[378,14,344,12],[378,16,344,14,"config"],[378,22,344,20],[378,23,344,21,"path"],[379,8,345,6],[379,9,345,7],[379,10,345,8],[380,8,346,6,"configs"],[380,15,346,13],[380,16,346,14,"push"],[380,20,346,18],[380,21,346,19,"createConfigItem"],[380,37,346,35],[380,38,346,36,"screen"],[380,44,346,42],[380,46,346,44],[380,47,346,45],[380,50,346,48,"routeNames"],[380,60,346,58],[380,61,346,59],[380,63,346,61],[380,64,346,62],[380,67,346,65,"paths"],[380,72,346,70],[380,73,346,71],[380,75,346,73,"config"],[380,81,346,79],[380,82,346,80,"parse"],[380,87,346,85],[380,88,346,86],[380,89,346,87],[381,8,347,6,"configs"],[381,15,347,13],[381,16,347,14,"push"],[381,20,347,18],[381,21,347,19],[381,24,347,22,"aliasConfigs"],[381,36,347,34],[381,37,347,35],[382,6,348,4],[383,6,349,4],[383,10,349,8],[383,17,349,15,"config"],[383,23,349,21],[383,28,349,26],[383,36,349,34],[383,40,349,38],[383,47,349,45,"config"],[383,53,349,51],[383,54,349,52,"path"],[383,58,349,56],[383,63,349,61],[383,71,349,69],[383,75,349,73,"config"],[383,81,349,79],[383,82,349,80,"alias"],[383,87,349,85],[383,89,349,87,"length"],[383,95,349,93],[383,97,349,95],[384,8,350,6],[384,14,350,12],[384,18,350,16,"Error"],[384,23,350,21],[384,24,350,22],[384,35,350,33,"screen"],[384,41,350,39],[384,126,350,124],[384,127,350,125],[385,6,351,4],[386,6,352,4],[386,10,352,8,"config"],[386,16,352,14],[386,17,352,15,"screens"],[386,24,352,22],[386,26,352,24],[387,8,353,6],[388,8,354,6],[388,12,354,10,"config"],[388,18,354,16],[388,19,354,17,"initialRouteName"],[388,35,354,33],[388,37,354,35],[389,10,355,8,"initials"],[389,18,355,16],[389,19,355,17,"push"],[389,23,355,21],[389,24,355,22],[390,12,356,10,"initialRouteName"],[390,28,356,26],[390,30,356,28,"config"],[390,36,356,34],[390,37,356,35,"initialRouteName"],[390,53,356,51],[391,12,357,10,"parentScreens"],[392,10,358,8],[392,11,358,9],[392,12,358,10],[393,8,359,6],[394,8,360,6,"Object"],[394,14,360,12],[394,15,360,13,"keys"],[394,19,360,17],[394,20,360,18,"config"],[394,26,360,24],[394,27,360,25,"screens"],[394,34,360,32],[394,35,360,33],[394,36,360,34,"forEach"],[394,43,360,41],[394,44,360,42,"nestedConfig"],[394,56,360,54],[394,60,360,58],[395,10,361,8],[395,14,361,14,"result"],[395,20,361,20],[395,23,361,23,"createNormalizedConfigs"],[395,46,361,46],[395,47,361,47,"nestedConfig"],[395,59,361,59],[395,61,361,61,"config"],[395,67,361,67],[395,68,361,68,"screens"],[395,75,361,75],[395,77,361,77,"initials"],[395,85,361,85],[395,87,361,87],[395,88,361,88],[395,91,361,91,"paths"],[395,96,361,96],[395,97,361,97],[395,99,361,99],[395,100,361,100],[395,103,361,103,"parentScreens"],[395,116,361,116],[395,117,361,117],[395,119,361,119,"routeNames"],[395,129,361,129],[395,130,361,130],[396,10,362,8,"configs"],[396,17,362,15],[396,18,362,16,"push"],[396,22,362,20],[396,23,362,21],[396,26,362,24,"result"],[396,32,362,30],[396,33,362,31],[397,8,363,6],[397,9,363,7],[397,10,363,8],[398,6,364,4],[399,4,365,2],[400,4,366,2,"routeNames"],[400,14,366,12],[400,15,366,13,"pop"],[400,18,366,16],[400,19,366,17],[400,20,366,18],[401,4,367,2],[401,11,367,9,"configs"],[401,18,367,16],[402,2,368,0],[402,3,368,1],[403,2,369,0],[403,6,369,6,"createConfigItem"],[403,22,369,22],[403,25,369,25,"createConfigItem"],[403,26,369,26,"screen"],[403,32,369,32],[403,34,369,34,"routeNames"],[403,44,369,44],[403,46,369,46,"paths"],[403,51,369,51],[403,53,369,53,"parse"],[403,58,369,58],[403,63,369,63],[404,4,370,2],[404,8,370,8,"parts"],[404,13,370,13],[404,16,370,16],[404,18,370,18],[406,4,372,2],[407,4,372,2],[407,8,372,2,"_loop2"],[407,14,372,2],[407,26,372,2,"_loop2"],[407,27,372,2,"_screen"],[407,34,372,2],[407,36,376,14],[408,6,377,4,"parts"],[408,11,377,9],[408,12,377,10,"push"],[408,16,377,14],[408,17,377,15],[408,20,377,18],[408,24,377,18,"getPatternParts"],[408,42,377,33],[408,43,377,33,"getPatternParts"],[408,58,377,33],[408,60,377,34,"path"],[408,64,377,38],[408,65,377,39],[408,66,377,40,"map"],[408,69,377,43],[408,70,377,44,"part"],[408,74,377,48],[408,79,377,53],[409,8,378,6],[409,11,378,9,"part"],[409,15,378,13],[410,8,379,6,"screen"],[410,14,379,12],[410,16,379,6,"screen"],[411,6,380,4],[411,7,380,5],[411,8,380,6],[411,9,380,7],[411,10,380,8],[412,4,381,2],[412,5,381,3],[413,4,373,2],[413,13,373,2,"_ref5"],[413,18,373,2],[413,22,376,7,"paths"],[413,27,376,12],[414,6,376,12],[414,10,374,4,"screen"],[414,17,374,10],[414,20,374,10,"_ref5"],[414,25,374,10],[414,26,374,4,"screen"],[414,32,374,10],[415,6,374,10],[415,10,375,4,"path"],[415,14,375,8],[415,17,375,8,"_ref5"],[415,22,375,8],[415,23,375,4,"path"],[415,27,375,8],[416,6,375,8,"_loop2"],[416,12,375,8],[416,13,375,8,"_screen"],[416,20,375,8],[417,4,375,8],[418,4,382,2],[418,8,382,8,"regex"],[418,13,382,13],[418,16,382,16,"parts"],[418,21,382,21],[418,22,382,22,"length"],[418,28,382,28],[418,31,382,31],[418,35,382,35,"RegExp"],[418,41,382,41],[418,42,382,42],[418,47,382,47,"parts"],[418,52,382,52],[418,53,382,53,"map"],[418,56,382,56],[418,57,382,57],[418,58,382,58,"it"],[418,60,382,60],[418,62,382,62,"i"],[418,63,382,63],[418,68,382,68],[419,6,383,4],[419,10,383,8,"it"],[419,12,383,10],[419,13,383,11,"param"],[419,18,383,16],[419,20,383,18],[420,8,384,6],[420,12,384,12,"reg"],[420,15,384,15],[420,18,384,18,"it"],[420,20,384,20],[420,21,384,21,"regex"],[420,26,384,26],[420,30,384,30],[420,37,384,37],[421,8,385,6],[421,15,385,13],[421,29,385,27,"i"],[421,30,385,28],[421,34,385,32,"reg"],[421,37,385,35],[421,45,385,43,"it"],[421,47,385,45],[421,48,385,46,"optional"],[421,56,385,54],[421,59,385,57],[421,62,385,60],[421,65,385,63],[421,67,385,65],[421,70,385,68],[422,6,386,4],[423,6,387,4],[423,13,387,11],[423,16,387,14,"it"],[423,18,387,16],[423,19,387,17,"segment"],[423,26,387,24],[423,31,387,29],[423,34,387,32],[423,37,387,35],[423,41,387,39],[423,44,387,42],[423,48,387,42,"escape"],[423,54,387,48],[423,55,387,48,"default"],[423,62,387,48],[423,64,387,49,"it"],[423,66,387,51],[423,67,387,52,"segment"],[423,74,387,59],[423,75,387,60],[423,80,387,65],[424,4,388,2],[424,5,388,3],[424,6,388,4],[424,7,388,5,"join"],[424,11,388,9],[424,12,388,10],[424,14,388,12],[424,15,388,13],[424,19,388,17],[424,20,388,18],[424,23,388,21,"undefined"],[424,32,388,30],[425,4,389,2],[425,8,389,8,"segments"],[425,16,389,16],[425,19,389,19,"parts"],[425,24,389,24],[425,25,389,25,"map"],[425,28,389,28],[425,29,389,29,"it"],[425,31,389,31],[425,35,389,35,"it"],[425,37,389,37],[425,38,389,38,"segment"],[425,45,389,45],[425,46,389,46],[426,4,390,2],[426,8,390,8,"params"],[426,14,390,14],[426,17,390,17,"parts"],[426,22,390,22],[426,23,390,23,"map"],[426,26,390,26],[426,27,390,27],[426,28,390,28,"it"],[426,30,390,30],[426,32,390,32,"i"],[426,33,390,33],[426,38,390,38,"it"],[426,40,390,40],[426,41,390,41,"param"],[426,46,390,46],[426,49,390,49],[427,6,391,4,"index"],[427,11,391,9],[427,13,391,11,"i"],[427,14,391,12],[428,6,392,4,"screen"],[428,12,392,10],[428,14,392,12,"it"],[428,16,392,14],[428,17,392,15,"screen"],[428,23,392,21],[429,6,393,4,"name"],[429,10,393,8],[429,12,393,10,"it"],[429,14,393,12],[429,15,393,13,"param"],[430,4,394,2],[430,5,394,3],[430,8,394,6],[430,12,394,10],[430,13,394,11],[430,14,394,12,"filter"],[430,20,394,18],[430,21,394,19,"it"],[430,23,394,21],[430,27,394,25,"it"],[430,29,394,27],[430,33,394,31],[430,37,394,35],[430,38,394,36],[431,4,395,2],[431,11,395,9],[432,6,396,4,"screen"],[432,12,396,10],[433,6,397,4,"regex"],[433,11,397,9],[434,6,398,4,"segments"],[434,14,398,12],[435,6,399,4,"params"],[435,12,399,10],[436,6,400,4,"routeNames"],[436,16,400,14],[437,6,401,4,"parse"],[438,4,402,2],[438,5,402,3],[439,2,403,0],[439,3,403,1],[440,2,404,0],[440,6,404,6,"findParseConfigForRoute"],[440,29,404,29],[440,32,404,32,"findParseConfigForRoute"],[440,33,404,33,"routeName"],[440,42,404,42],[440,44,404,44,"flatConfig"],[440,54,404,54],[440,59,404,59],[441,4,405,2],[441,9,405,7],[441,13,405,13,"config"],[441,19,405,19],[441,23,405,23,"flatConfig"],[441,33,405,33],[441,35,405,35],[442,6,406,4],[442,10,406,8,"routeName"],[442,19,406,17],[442,24,406,22,"config"],[442,30,406,28],[442,31,406,29,"routeNames"],[442,41,406,39],[442,42,406,40,"config"],[442,48,406,46],[442,49,406,47,"routeNames"],[442,59,406,57],[442,60,406,58,"length"],[442,66,406,64],[442,69,406,67],[442,70,406,68],[442,71,406,69],[442,73,406,71],[443,8,407,6],[443,15,407,13,"config"],[443,21,407,19],[443,22,407,20,"parse"],[443,27,407,25],[444,6,408,4],[445,4,409,2],[446,4,410,2],[446,11,410,9,"undefined"],[446,20,410,18],[447,2,411,0],[447,3,411,1],[449,2,413,0],[450,2,414,0],[450,6,414,6,"findInitialRoute"],[450,22,414,22],[450,25,414,25,"findInitialRoute"],[450,26,414,26,"routeName"],[450,35,414,35],[450,37,414,37,"parentScreens"],[450,50,414,50],[450,52,414,52,"initialRoutes"],[450,65,414,65],[450,70,414,70],[451,4,415,2],[451,9,415,7],[451,13,415,13,"config"],[451,19,415,19],[451,23,415,23,"initialRoutes"],[451,36,415,36],[451,38,415,38],[452,6,416,4],[452,10,416,8,"parentScreens"],[452,23,416,21],[452,24,416,22,"length"],[452,30,416,28],[452,35,416,33,"config"],[452,41,416,39],[452,42,416,40,"parentScreens"],[452,55,416,53],[452,56,416,54,"length"],[452,62,416,60],[452,64,416,62],[453,8,417,6],[453,12,417,10,"sameParents"],[453,23,417,21],[453,26,417,24],[453,30,417,28],[454,8,418,6],[454,13,418,11],[454,17,418,15,"i"],[454,18,418,16],[454,21,418,19],[454,22,418,20],[454,24,418,22,"i"],[454,25,418,23],[454,28,418,26,"parentScreens"],[454,41,418,39],[454,42,418,40,"length"],[454,48,418,46],[454,50,418,48,"i"],[454,51,418,49],[454,53,418,51],[454,55,418,53],[455,10,419,8],[455,14,419,12,"parentScreens"],[455,27,419,25],[455,28,419,26,"i"],[455,29,419,27],[455,30,419,28],[455,31,419,29,"localeCompare"],[455,44,419,42],[455,45,419,43,"config"],[455,51,419,49],[455,52,419,50,"parentScreens"],[455,65,419,63],[455,66,419,64,"i"],[455,67,419,65],[455,68,419,66],[455,69,419,67],[455,74,419,72],[455,75,419,73],[455,77,419,75],[456,12,420,10,"sameParents"],[456,23,420,21],[456,26,420,24],[456,31,420,29],[457,12,421,10],[458,10,422,8],[459,8,423,6],[460,8,424,6],[460,12,424,10,"sameParents"],[460,23,424,21],[460,25,424,23],[461,10,425,8],[461,17,425,15,"routeName"],[461,26,425,24],[461,31,425,29,"config"],[461,37,425,35],[461,38,425,36,"initialRouteName"],[461,54,425,52],[461,57,425,55,"config"],[461,63,425,61],[461,64,425,62,"initialRouteName"],[461,80,425,78],[461,83,425,81,"undefined"],[461,92,425,90],[462,8,426,6],[463,6,427,4],[464,4,428,2],[465,4,429,2],[465,11,429,9,"undefined"],[465,20,429,18],[466,2,430,0],[466,3,430,1],[468,2,432,0],[469,2,433,0],[470,2,434,0],[470,6,434,6,"createStateObject"],[470,23,434,23],[470,26,434,26,"createStateObject"],[470,27,434,27,"initialRoute"],[470,39,434,39],[470,41,434,41,"route"],[470,46,434,46],[470,48,434,48,"isEmpty"],[470,55,434,55],[470,60,434,60],[471,4,435,2],[471,8,435,6,"isEmpty"],[471,15,435,13],[471,17,435,15],[472,6,436,4],[472,10,436,8,"initialRoute"],[472,22,436,20],[472,24,436,22],[473,8,437,6],[473,15,437,13],[474,10,438,8,"index"],[474,15,438,13],[474,17,438,15],[474,18,438,16],[475,10,439,8,"routes"],[475,16,439,14],[475,18,439,16],[475,19,439,17],[476,12,440,10,"name"],[476,16,440,14],[476,18,440,16,"initialRoute"],[477,10,441,8],[477,11,441,9],[477,13,441,11,"route"],[477,18,441,16],[478,8,442,6],[478,9,442,7],[479,6,443,4],[479,7,443,5],[479,13,443,11],[480,8,444,6],[480,15,444,13],[481,10,445,8,"routes"],[481,16,445,14],[481,18,445,16],[481,19,445,17,"route"],[481,24,445,22],[482,8,446,6],[482,9,446,7],[483,6,447,4],[484,4,448,2],[484,5,448,3],[484,11,448,9],[485,6,449,4],[485,10,449,8,"initialRoute"],[485,22,449,20],[485,24,449,22],[486,8,450,6],[486,15,450,13],[487,10,451,8,"index"],[487,15,451,13],[487,17,451,15],[487,18,451,16],[488,10,452,8,"routes"],[488,16,452,14],[488,18,452,16],[488,19,452,17],[489,12,453,10,"name"],[489,16,453,14],[489,18,453,16,"initialRoute"],[490,10,454,8],[490,11,454,9],[490,13,454,11],[491,12,455,10],[491,15,455,13,"route"],[491,20,455,18],[492,12,456,10,"state"],[492,17,456,15],[492,19,456,17],[493,14,457,12,"routes"],[493,20,457,18],[493,22,457,20],[494,12,458,10],[495,10,459,8],[495,11,459,9],[496,8,460,6],[496,9,460,7],[497,6,461,4],[497,7,461,5],[497,13,461,11],[498,8,462,6],[498,15,462,13],[499,10,463,8,"routes"],[499,16,463,14],[499,18,463,16],[499,19,463,17],[500,12,464,10],[500,15,464,13,"route"],[500,20,464,18],[501,12,465,10,"state"],[501,17,465,15],[501,19,465,17],[502,14,466,12,"routes"],[502,20,466,18],[502,22,466,20],[503,12,467,10],[504,10,468,8],[504,11,468,9],[505,8,469,6],[505,9,469,7],[506,6,470,4],[507,4,471,2],[508,2,472,0],[508,3,472,1],[509,2,473,0],[509,6,473,6,"createNestedStateObject"],[509,29,473,29],[509,32,473,32,"createNestedStateObject"],[509,33,473,33,"path"],[509,37,473,37],[509,39,473,39,"routes"],[509,45,473,45],[509,47,473,47,"initialRoutes"],[509,60,473,60],[509,62,473,62,"flatConfig"],[509,72,473,72],[509,77,473,77],[510,4,474,2],[510,8,474,6,"route"],[510,13,474,11],[510,16,474,14,"routes"],[510,22,474,20],[510,23,474,21,"shift"],[510,28,474,26],[510,29,474,27],[510,30,474,28],[511,4,475,2],[511,8,475,8,"parentScreens"],[511,21,475,21],[511,24,475,24],[511,26,475,26],[512,4,476,2],[512,8,476,6,"initialRoute"],[512,20,476,18],[512,23,476,21,"findInitialRoute"],[512,39,476,37],[512,40,476,38,"route"],[512,45,476,43],[512,46,476,44,"name"],[512,50,476,48],[512,52,476,50,"parentScreens"],[512,65,476,63],[512,67,476,65,"initialRoutes"],[512,80,476,78],[512,81,476,79],[513,4,477,2,"parentScreens"],[513,17,477,15],[513,18,477,16,"push"],[513,22,477,20],[513,23,477,21,"route"],[513,28,477,26],[513,29,477,27,"name"],[513,33,477,31],[513,34,477,32],[514,4,478,2],[514,8,478,8,"state"],[514,13,478,13],[514,16,478,16,"createStateObject"],[514,33,478,33],[514,34,478,34,"initialRoute"],[514,46,478,46],[514,48,478,48,"route"],[514,53,478,53],[514,55,478,55,"routes"],[514,61,478,61],[514,62,478,62,"length"],[514,68,478,68],[514,73,478,73],[514,74,478,74],[514,75,478,75],[515,4,479,2],[515,8,479,6,"routes"],[515,14,479,12],[515,15,479,13,"length"],[515,21,479,19],[515,24,479,22],[515,25,479,23],[515,27,479,25],[516,6,480,4],[516,10,480,8,"nestedState"],[516,21,480,19],[516,24,480,22,"state"],[516,29,480,27],[517,6,481,4],[517,13,481,11,"route"],[517,18,481,16],[517,21,481,19,"routes"],[517,27,481,25],[517,28,481,26,"shift"],[517,33,481,31],[517,34,481,32],[517,35,481,33],[517,37,481,35],[518,8,482,6,"initialRoute"],[518,20,482,18],[518,23,482,21,"findInitialRoute"],[518,39,482,37],[518,40,482,38,"route"],[518,45,482,43],[518,46,482,44,"name"],[518,50,482,48],[518,52,482,50,"parentScreens"],[518,65,482,63],[518,67,482,65,"initialRoutes"],[518,80,482,78],[518,81,482,79],[519,8,483,6],[519,12,483,12,"nestedStateIndex"],[519,28,483,28],[519,31,483,31,"nestedState"],[519,42,483,42],[519,43,483,43,"index"],[519,48,483,48],[519,52,483,52,"nestedState"],[519,63,483,63],[519,64,483,64,"routes"],[519,70,483,70],[519,71,483,71,"length"],[519,77,483,77],[519,80,483,80],[519,81,483,81],[520,8,484,6,"nestedState"],[520,19,484,17],[520,20,484,18,"routes"],[520,26,484,24],[520,27,484,25,"nestedStateIndex"],[520,43,484,41],[520,44,484,42],[520,45,484,43,"state"],[520,50,484,48],[520,53,484,51,"createStateObject"],[520,70,484,68],[520,71,484,69,"initialRoute"],[520,83,484,81],[520,85,484,83,"route"],[520,90,484,88],[520,92,484,90,"routes"],[520,98,484,96],[520,99,484,97,"length"],[520,105,484,103],[520,110,484,108],[520,111,484,109],[520,112,484,110],[521,8,485,6],[521,12,485,10,"routes"],[521,18,485,16],[521,19,485,17,"length"],[521,25,485,23],[521,28,485,26],[521,29,485,27],[521,31,485,29],[522,10,486,8,"nestedState"],[522,21,486,19],[522,24,486,22,"nestedState"],[522,35,486,33],[522,36,486,34,"routes"],[522,42,486,40],[522,43,486,41,"nestedStateIndex"],[522,59,486,57],[522,60,486,58],[522,61,486,59,"state"],[522,66,486,64],[523,8,487,6],[524,8,488,6,"parentScreens"],[524,21,488,19],[524,22,488,20,"push"],[524,26,488,24],[524,27,488,25,"route"],[524,32,488,30],[524,33,488,31,"name"],[524,37,488,35],[524,38,488,36],[525,6,489,4],[526,4,490,2],[527,4,491,2,"route"],[527,9,491,7],[527,12,491,10],[527,16,491,10,"findFocusedRoute"],[527,35,491,26],[527,36,491,26,"findFocusedRoute"],[527,52,491,26],[527,54,491,27,"state"],[527,59,491,32],[527,60,491,33],[528,4,492,2,"route"],[528,9,492,7],[528,10,492,8,"path"],[528,14,492,12],[528,17,492,15,"path"],[528,21,492,19],[528,22,492,20,"replace"],[528,29,492,27],[528,30,492,28],[528,35,492,33],[528,37,492,35],[528,39,492,37],[528,40,492,38],[529,4,493,2],[529,8,493,8,"params"],[529,14,493,14],[529,17,493,17,"parseQueryParams"],[529,33,493,33],[529,34,493,34,"path"],[529,38,493,38],[529,40,493,40,"flatConfig"],[529,50,493,50],[529,53,493,53,"findParseConfigForRoute"],[529,76,493,76],[529,77,493,77,"route"],[529,82,493,82],[529,83,493,83,"name"],[529,87,493,87],[529,89,493,89,"flatConfig"],[529,99,493,99],[529,100,493,100],[529,103,493,103,"undefined"],[529,112,493,112],[529,113,493,113],[530,4,494,2],[530,8,494,6,"params"],[530,14,494,12],[530,16,494,14],[531,6,495,4,"route"],[531,11,495,9],[531,12,495,10,"params"],[531,18,495,16],[531,21,495,19],[532,8,496,6],[532,11,496,9,"route"],[532,16,496,14],[532,17,496,15,"params"],[532,23,496,21],[533,8,497,6],[533,11,497,9,"params"],[534,6,498,4],[534,7,498,5],[535,4,499,2],[536,4,500,2],[536,11,500,9,"state"],[536,16,500,14],[537,2,501,0],[537,3,501,1],[538,2,502,0],[538,6,502,6,"parseQueryParams"],[538,22,502,22],[538,25,502,25,"parseQueryParams"],[538,26,502,26,"path"],[538,30,502,30],[538,32,502,32,"parseConfig"],[538,43,502,43],[538,48,502,48],[539,4,503,2],[539,8,503,8,"query"],[539,13,503,13],[539,16,503,16,"path"],[539,20,503,20],[539,21,503,21,"split"],[539,26,503,26],[539,27,503,27],[539,30,503,30],[539,31,503,31],[539,32,503,32],[539,33,503,33],[539,34,503,34],[540,4,504,2],[540,8,504,8,"params"],[540,14,504,14],[540,17,504,17,"queryString"],[540,28,504,28],[540,29,504,29,"parse"],[540,34,504,34],[540,35,504,35,"query"],[540,40,504,40],[540,41,504,41],[541,4,505,2],[541,8,505,6,"parseConfig"],[541,19,505,17],[541,21,505,19],[542,6,506,4,"Object"],[542,12,506,10],[542,13,506,11,"keys"],[542,17,506,15],[542,18,506,16,"params"],[542,24,506,22],[542,25,506,23],[542,26,506,24,"forEach"],[542,33,506,31],[542,34,506,32,"name"],[542,38,506,36],[542,42,506,40],[543,8,507,6],[543,12,507,10,"Object"],[543,18,507,16],[543,19,507,17,"hasOwnProperty"],[543,33,507,31],[543,34,507,32,"call"],[543,38,507,36],[543,39,507,37,"parseConfig"],[543,50,507,48],[543,52,507,50,"name"],[543,56,507,54],[543,57,507,55],[543,61,507,59],[543,68,507,66,"params"],[543,74,507,72],[543,75,507,73,"name"],[543,79,507,77],[543,80,507,78],[543,85,507,83],[543,93,507,91],[543,95,507,93],[544,10,508,8,"params"],[544,16,508,14],[544,17,508,15,"name"],[544,21,508,19],[544,22,508,20],[544,25,508,23,"parseConfig"],[544,36,508,34],[544,37,508,35,"name"],[544,41,508,39],[544,42,508,40],[544,43,508,41,"params"],[544,49,508,47],[544,50,508,48,"name"],[544,54,508,52],[544,55,508,53],[544,56,508,54],[545,8,509,6],[546,6,510,4],[546,7,510,5],[546,8,510,6],[547,4,511,2],[548,4,512,2],[548,11,512,9,"Object"],[548,17,512,15],[548,18,512,16,"keys"],[548,22,512,20],[548,23,512,21,"params"],[548,29,512,27],[548,30,512,28],[548,31,512,29,"length"],[548,37,512,35],[548,40,512,38,"params"],[548,46,512,44],[548,49,512,47,"undefined"],[548,58,512,56],[549,2,513,0],[549,3,513,1],[550,0,513,2],[550,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","getPatternParts.map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;OC8B;4DC4B;KDK;+BES,0CF;gEGE;QHE;CDuB;AKM;CLO;AMC;CNa;AOC;CPS;AQC;+CCE,uED,QE;GF2E;CRC;AWC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CXC;AeC;qBCC;IDI;CfC;4BiBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CjBS;gCuBC;0CCgE;ODG;CvBK;yByBC;4CCQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;CzBS;gC6BC;C7BO;yB8BG;C9BgB;0B+BI;C/BsC;gCgCC;ChC4B;yBiCC;gCTI;KSI;CjCG"},"hasCjsExports":false},"type":"js/module"}]}